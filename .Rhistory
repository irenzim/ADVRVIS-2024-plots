setwd("/Users/irenaz/Desktop/Masters - DSBA/2 year/Text Mining/Class_4")
# upload the dataset - Amazon reviews
product_review <- readr::read_csv("amazon_reviews.csv")
head(product_reviews)
head(product_review)
# upload the dataset - Amazon reviews
product_review <- readr::read_csv("amazon_reviews.csv")
# upload the dataset - Amazon reviews
product_review <- readr::read_csv("amazon_reviews.csv")
# upload the dataset - Amazon reviews
product_review <- readr::read_csv("TMSMM_class4_amazon_reviews.csv")
head(product_review)
View(product_review)
# inspect the dataset
head(product_review)
# more elegant way
pandoc.table(product_review[2:4,1:3],
justify = c('left', 'left', 'center'), style = 'grid')
install.packages("pandoc")
library(pandoc)
# more elegant way
pandoc.table(product_review[2:4,1:3],
justify = c('left', 'left', 'center'), style = 'grid')
library(markdown)
install.packages("pander")
library(pander)
# more elegant way
pandoc.table(product_review[2:4,1:3],
justify = c('left', 'left', 'center'), style = 'grid')
# how about the table of ratings?
table(product_review$rating)
product_review %>% summarise()
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
product_review %>% summarise()
product_review %>% group_by(rating)
product_review %>% group_by(rating) %>% summarise()
product_review %>% group_by(rating) %>% summarize()
# how about the table of ratings?
table(product_review$rating)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# how about the table of ratings?
table(product_review$rating)
# put a 1 for great reviews (4 or 5) or a 0 for bad reviews (1 or 2)
# remove all the reviews that have a rating of 3 as they might be considered as neutral
product_review <- product_review %>% filter(rating != 3) %>%
mutate(rating_new = if_else(rating >= 4, 1, 0))
# create the training set
product_review_training <-  product_review[1:150, ]
install.packages("tm")
library(tm)
corpus_toy <- Corpus(VectorSource(product_review_training$review))
tdm_toy <- DocumentTermMatrix(corpus_toy, list(removePunctuation = TRUE,
removeNumbers = TRUE))
training_set_toy <- as.matrix(tdm_toy)
training_set_toy <- cbind(training_set_toy, product_review_training$rating_new)
colnames(training_set_toy)[ncol(training_set_toy)] <- "y"
training_set_toy <- as.data.frame(training_set_toy)
training_set_toy$y <- as.factor(training_set_toy$y)
# create our model using SVM
install.packages("caret")
library(caret)
install.packages("LiblineaR")
library(LiblineaR)
install.packages("e1071")
library(e1071)
review_toy_model <- train(y ~., data = training_set_toy, method = 'svmLinear3')
review_toy_model
str(review_toy_model)
View(tdm_toy)
# run the model
test_review_data <- product_review[151:174, ]
test_corpus <- Corpus(VectorSource(test_review_data$review))
test_tdm <- DocumentTermMatrix(test_corpus, control=list(dictionary = Terms(tdm_toy)))
test_tdm <- as.matrix(test_tdm)
# make the prediction
model_toy_result <- predict(review_toy_model, newdata = test_tdm)
# inspect the output
check_accuracy <- as.data.frame(cbind(prediction = model_toy_result, rating = test_review_data$rating_new))
check_accuracy <- check_accuracy %>% mutate(prediction = as.integer(prediction) - 1)
check_accuracy$accuracy <- if_else(check_accuracy$prediction == check_accuracy$rating, 1, 0)
round(prop.table(table(check_accuracy$accuracy)), 3)
install.packages("gmodels")
library(gmodels)
CrossTable(x = test_review_data$rating_new, model_toy_result,
prop.chisq = FALSE)
CrossTable(x = test_review_data$rating_new, model_toy_result,
prop.chisq = FALSE)
library(ggplot2)
library(dplyr)
library(tidyr)
data <- read.csv('ThyroidDF.csv')
setwd("/Users/irenaz/Desktop/Masters - DSBA/2 year/Advanced Visualisations in R/Materials")
setwd("/Users/irenaz/Desktop/Masters - DSBA/2 year/Advanced Visualisations in R/Project")
data <- read.csv('thyroidDF.csv')
data %>% as_tibble()
str(data)
ggplot(data, aes(x=T3, y = TSH)) +
ggpoint()
ggplot(data, aes(x=T3, y = TSH)) +
geom_point()
ggplot(data, aes(x=T3, y = TSH, color = sick)) +
geom_point()
ggplot(data[sick = T], aes(x=T3, y = TSH, color = sick)) +
geom_point()
ggplot(data, aes(x=T3, y = TSH, color = sick)) +
geom_point()
data <- read_csv('Data/QOL(County Level).csv')
data <- read.csv('Data/QOL(County Level).csv')
glimpse(data)
data3 <- read.csv('Data/QOLMainCrosswalk.csv')
View(data3)
data4 <- read.csv('Data/QOLSources.csv')
View(data4)
data_sources  <- read.csv('Data/QOLSources.csv')
View(data3)
data2 <- read.csv('Data/QOL(Public School Level).csv')
View(data2)
