#---------------------------------------------------------#
#               Advanced Visualization in R               #
#                    Piotr Ä†wiakowski                     #
#             Faculty of Economic Sciences UW             #
#                Advanced Plots - overview                #
#---------------------------------------------------------#

# Packages download
# install.packages('ggalt')
# install.packages('ggfortify')
# install.packages('ggseas')
# install.packages('ggalluvial')
# install.packages('caret')
# install.packages('plotROC')
# install.packages('gglm')
# install.packages('ggdist')
# install.packages('yardstick')
# install.packages('funModelling')
# install.packages('classifierplots')

# Packages import
library(yardstick)
library(tidyverse)
library(readxl)
library(lubridate)
library(ggalt)
library(ggfortify)
library(ggseas)
library(ggalluvial)
library(caret)
library(plotROC)
library(gglm)
library(broom)
library(ggdist)
#library(funModeling)
library(classifierplots)
library(forecast)

# save(df, ports, health, cancer_sur_rates, file = 'Data/adv_vis2.Rdata')

# Datasets
load('Data/adv_vis2.Rdata')
spare.time <- read.csv('Data/free_time.csv')
bank <- read.csv('Data/bank-balanced.csv')
foot <- read.csv('Data/footballers.csv', sep = ';')

# 1. Bump Chart ----------------------------------------------------------------
# shipping volume rank

head(ports)
summary(ports$year)
ports <- ports %>%
  filter(rank <= 15) %>%
  mutate(china_flag = ifelse(economy == "China", T, F)) %>%
  mutate(china_labels = ifelse(china_flag == T, port, "other"))

ports %>%
  filter(port == 'Shanghai')

ports %>%
  filter(port == 'Dalian')

ggplot(data = ports, aes(x = year, y = rank, group = port_label)) +
  geom_line(aes(color = china_labels, alpha = china_flag), size = 2) +
  geom_point(aes(color = china_labels, alpha = china_flag), size = 2.3, shape = 21, fill = 'white') +
  geom_text(data = ports %>% filter(year == "2014", rank <= 15),
            aes(label = port_label) , hjust = -.05, color = "#888888", size = 4) +
  geom_text(data = ports %>% filter(year == "2004", rank <= 15),
            aes(label = port_label) , hjust = 1.05, color = "#888888", size = 4) +
  scale_x_discrete(expand = c(.2, .2)) +
  scale_y_reverse(breaks = seq(1, 15)) +
  labs(title = "Top15 biggest ports in the world", x = "Year", y = "Rank") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "none")

# Source: https://www.sharpsightlabs.com/

# Another example:
# install.packages("ggbump")
library(ggbump)
library(tidyverse)
library(cowplot)
library(wesanderson)

df <- tibble(
  country = c("India", "India", "India", "Sweden", "Sweden", "Sweden", "Germany", "Germany", "Germany", "Finland", "Finland", "Finland"),
  year = c(2011, 2012, 2013, 2011, 2012, 2013, 2011, 2012, 2013, 2011, 2012, 2013),
  value = c(492, 246, 246, 369, 123, 492, 246, 369, 123, 123, 492, 369)
)

knitr::kable(head(df))

df <- df %>%
  group_by(year) %>%
  mutate(rank = rank(value, ties.method = "random")) %>%
  ungroup()

knitr::kable(head(df))

ggplot(df, aes(year, rank, color = country)) +
  geom_bump()

ggplot(df, aes(year, rank, color = country)) +
  geom_point(size = 7) +
  geom_text(data = df %>% filter(year == min(year)),
            aes(x = year - .1, label = country), size = 5, hjust = 1) +
  geom_text(data = df %>% filter(year == max(year)),
            aes(x = year + .1, label = country), size = 5, hjust = 0) +
  geom_bump(size = 2, smooth = 8) +
  scale_x_continuous(limits = c(2010.6, 2013.4),
                     breaks = seq(2011, 2013, 1)) +
  theme_minimal_grid(font_size = 14, line_size = 0) +
  theme(legend.position = "none") +
  labs(y = "RANK",
       x = NULL) +
  scale_y_reverse() +
  scale_color_manual(values = wes_palette(n = 4, name = "GrandBudapest1"))

# More information:
# https://github.com/davidsjoberg/ggbump

# 2. Dumbbell chart -------------------------------------------------------------

ggplot(health, aes(x = pct_2013, y = Area, group = Area)) +
  geom_dumbbell(color = "#a3c4dc", size = 0.75, aes(xend = pct_2014)) +
  scale_x_continuous(labels = scales::percent) +
  labs(
    x = NULL, y = NULL, title = "Dumbbell Chart",
    subtitle = "Pct Change: 2013 vs 2014",
    caption = "Source: https://github.com/hrbrmstr/ggalt"
  )

ggplot(health, aes(y = Area, group = Area)) +
  geom_point(aes(x = pct_2013, color = '2013')) +
  geom_point(aes(x = pct_2014, color = '2014')) +
  geom_segment(aes(x = pct_2013, xend = pct_2014, yend = Area))

# 3. Slope chart ---------------------------------------------------------------

# 3.1 First example

# Data preparationa:
load('Data/adv_vis2.Rdata')
left_label <- paste(df$continent, round(df$`1952`),sep=", ")
right_label <- paste(df$continent, round(df$`1957`),sep=", ")
df$class <- ifelse((df$`1957` - df$`1952`) < 0, "red", "green")

# Chart (gross domestic product per capita)
ggplot(df) +
  geom_segment(aes(x = 1, xend = 2, y = `1952`, yend = `1957`, col = class),
               size = .75, show.legend = F) +
  geom_vline(xintercept = 1, linetype = "dashed", size = .1) +
  geom_vline(xintercept = 2, linetype = "dashed", size = .1) +
  scale_color_manual(labels = c("Up", "Down"),
                     values = c("green" = "#00ba38", "red" = "#f8766d")) +
  xlim(.5, 2.5) +
  ylim(0, (1.1 * max(df$`1952`, df$`1957`))) +
  geom_text(label = left_label, y=df$`1952`, x=rep(1, NROW(df)), hjust=1.1, size=3.5) +
  geom_text(label = right_label, y=df$`1957`, x=rep(2, NROW(df)), hjust=-0.1, size=3.5) +
  geom_text(label ="1952", x=1, y=1.1 * max(df$`1952`, df$`1957`), hjust=1.2, size=5) +
  geom_text(label ="1957", x=2, y=1.1 * max(df$`1952`, df$`1957`), hjust=-0.1, size=5) +
  labs(title="Mean GdpPerCap change") +
  theme_void()

# 3.2 Second example

source('functions/slope_graph.R')

## Prepare data
df <- tufte_sort(
  cancer_sur_rates,
  x="year",
  y="value",
  group="group",
  min.space=0.05
) %>%
  mutate(
    x = factor(x, levels = c(5,10,15,20), labels = c("5 years", "10 years", "15 years", "20 years")),
    y = round(y)
  )

## Plot
plot_slopegraph(df) +
  labs(title="Estimates of % survival rates") +
  theme_classic() +
  theme(axis.title=element_blank(),
        axis.ticks = element_blank(),
        plot.title = element_text(hjust=0.5, face="bold"),
        axis.text = element_text(face="bold"))

# 4. Time series ---------------------------------------------------------------

# 4.1 From Timeseries object (ts) ----------------------------------------------

autoplot(AirPassengers) +
  theme_classic() +
  labs(title = 'AirPassengers')

# From the forecast library:
ggseasonplot(AirPassengers) +
  labs(title="Seasonal plot: International Airline Passengers")

# 4.2. Seasonal Decomposition --------------------------------------------------

ggplot(ldeaths_df, aes(x = YearMon, y = deaths, colour = sex)) +
  geom_line()

ggsdc(ldeaths_df, aes(x = YearMon, y = deaths, colour = sex), method = "decompose") +
  geom_line()

ggsdc(ldeaths_df, aes(x = YearMon, y = deaths, colour = sex), method = "seas") +
  geom_line()

# 4.3 Area chart ---------------------------------------------------------------
df <- economics %>%
  select("date", "psavert", "uempmed") %>%
  filter(lubridate::year(date) %in% c(1967:1981)) %>%
  gather(Macro, Value, -date)
  # pivot_longer(cols = c("psavert", "uempmed"), names_to = "Macro", values_to = "Value")

# plot
ggplot(df, aes(x = date, y = Value, fill = Macro)) +
  geom_area() +
  labs(
    title = "Area Chart of Returns Percentage",
    subtitle = "From Wide Data format",
    caption = "Source: Economics",
    y = "Returns %"
  ) +
  scale_fill_manual(name = "",
                    values = c("psavert" = "#00ba38", "uempmed" = "#f8766d")) +
  theme(panel.grid.minor = element_blank())


ggplot(df, aes(x = date, y = Value, fill = Macro)) +
  geom_area(position = position_dodge(width = 0)) +
  labs(
    title = "Area Chart of Returns Percentage",
    subtitle = "From Wide Data format",
    caption = "Source: Economics",
    y = "Returns %"
  ) +
  scale_fill_manual(
    name = "",
    values = c("psavert" = "#00ba38", "uempmed" = "#f8766d")
  ) +
  theme(panel.grid.minor = element_blank())

ggplot(df, aes(x = date, y = Value, fill = Macro)) +
  geom_area(position = 'fill') +
  labs(
    title = "Area Chart of Returns Percentage",
    subtitle = "From Wide Data format",
    caption = "Source: Economics",
    y = "Returns %"
  ) +
  scale_fill_manual(
    name = "",
    values = c("psavert" = "#00ba38", "uempmed" = "#f8766d")
  ) +
  theme(panel.grid.minor = element_blank())

# Source: https://github.com/ellisp/ggseas

# 5. Riverplot -----------------------------------------------------------------

library(alluvial)
options(scipen = 10)
data(Refugees, package = "alluvial")

# Defining regions
country_regions <- c(
  Afghanistan = "Middle East",
  Burundi = "Central Africa",
  `Congo DRC` = "Central Africa",
  Iraq = "Middle East",
  Myanmar = "Southeast Asia",
  Palestine = "Middle East",
  Somalia = "Horn of Africa",
  Sudan = "Central Africa",
  Syria = "Middle East",
  Vietnam = "Southeast Asia"
)

# Computing regions column for countries:
Refugees$region <- country_regions[Refugees$country]

ggplot(data = Refugees, aes(x = year, y = refugees, fill = country)) +
  geom_area() +
  theme_bw() +
  scale_fill_brewer(type = "qual", palette = "Set3") +
  scale_x_continuous(breaks = seq(2003, 2013, 2))

ggplot(data = Refugees,
       aes(x = year, y = refugees, alluvium = country)) +
  geom_alluvium(aes(fill = country, colour = country),
                alpha = .75, decreasing = FALSE) +
  scale_x_continuous(breaks = seq(2003, 2013, 2)) +
  theme_bw() +
  scale_fill_brewer(type = "qual", palette = "Set3") +
  scale_color_brewer(type = "qual", palette = "Set3")

ggplot(data = Refugees,
       aes(x = year, y = refugees, alluvium = country)) +
  geom_alluvium(aes(fill = country, colour = country),
                alpha = .75, decreasing = FALSE) +
  scale_x_continuous(breaks = seq(2003, 2013, 2)) +
  theme_bw() +
  scale_fill_brewer(type = "qual", palette = "Set3") +
  scale_color_brewer(type = "qual", palette = "Set3") +
  facet_wrap(~ region, scales = "fixed") +
  ggtitle("refugee volume by country and region of origin")

# More info:
# https://cran.r-project.org/web/packages/ggalluvial/vignettes/ggalluvial.html
# https://www.datisticsblog.com/2018/10/intro_easyalluvial/

# 6. Plot in advanced statiscs -------------------------------------------------

# 6.1 ROC Curve ----------------------------------------------------------------

# Data preparation:

# Data preparation:
bank$deposit <- factor(bank$deposit, levels = c('no', 'yes'))

ctrl <- trainControl(method = "cv", number = 5, search = 'random', verboseIter = T,
                     summaryFunction = twoClassSummary, classProbs = T,
                     savePredictions  = 'final')

fit_rf <- caret::train(deposit ~ ., data = bank,
                       method = "rf", metric = 'ROC',
                       tuneGrid = data.frame(mtry = 20),
                       trControl = ctrl)

fit_knn <- caret::train(deposit ~ ., data = bank,
                        method = "knn", trControl = ctrl,
                        tuneGrid = data.frame(k = 10),
                        preProcess = c("center","scale"))

df <- inner_join(fit_rf$pred %>% select(obs, yes, rowIndex),
                 fit_knn$pred %>% select(obs, yes, rowIndex),
                 suffix = c('_rf', '_knn'), by = 'rowIndex')

test <- data.frame(
  D = as.numeric(df$obs_rf) - 1,
  D.str = as.character(df$obs_rf),
  M_knn = df$yes_knn,
  M_rf = df$yes_rf,
  stringsAsFactors = FALSE
)

ggplot(test, aes(d = D, m = M_knn)) +
  geom_roc(n.cuts = 10, labelsize = 3, labelround = 2)

ggplot(test, aes(d = D, m = M_knn)) +
  geom_roc(n.cuts = 10, labelsize = 3, labelround = 2) +
  style_roc()

ggplot(test, aes(d = D, m = M_knn)) +
  geom_roc() +
  geom_rocci(ci.at = quantile(test$M_knn, c(.1, .4, .5, .6, .9))) +
  style_roc()

longtest <- melt_roc(test, "D", c("M_knn", "M_rf"))
head(longtest)

ggplot(longtest, aes(d = D, m = M, color = name)) +
  geom_roc() +
  style_roc() +
  scale_color_manual(values = c('red', 'green3')) +
  theme(legend.position = 'top')

ggplot(longtest, aes(d = D, m = M, color = name)) +
  geom_roc() +
  style_roc() +
  geom_rocci(ci.at = quantile(test$M_knn, c(.1, .4, .5, .6, .9)))

# More info:
# https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html

# 6.2. Precision-Recall curve --------------------------------------------------

# Let's compute Pr-Recall
df$obs2 <- factor(df$obs_rf, levels = c('yes', 'no'))
pr <- pr_curve(df, obs2, yes_rf)

# Wykres Pr-Recall:
ggplot(data = pr, aes(x = recall, y = precision)) +
  geom_path() + # geometria do Å‚Ä…czenia punktÃ³w
  # coord_equal() + # rÃ³wne dÅ‚ugoÅ›ci osi
  theme_bw() +
  labs(title = 'Precision-Recall for deposit = 1')

# 6.3 Gain and Lift curve ------------------------------------------------------

model_data <- tibble::tribble(
  ~obs, ~prob,
  "yes", 0.91,
  "yes", 0.85,
  "no", 0.84,
  "yes", 0.8,
  "no", 0.7,
  "no", 0.66,
  "yes", 0.4,
  "no", 0.2,
  "no", 0.12,
  "no", 0.1
)

model_data %>%
  mutate(
    hit = obs == "yes",
    total = sum(hit),
    cumul_hit = cumsum(hit),
    gain = cumul_hit / total,
    random = (1:n())/n(),
    lift = gain / random
  )

gain_lift(
  data = model_data, score = 'prob',
  target = 'obs', q_segments = 10
)



gain_lift(
  data = df, score = 'yes_rf',
  target = 'obs_rf', q_segments = 10
)

# Manually:
p.Yes <- sum(df$obs_rf == 'yes')/nrow(df)

# Data preparation
df.agg <- df %>%
  mutate(dec.pred = Hmisc::cut2(yes_rf, g = 10)) %>%
  group_by(dec.pred) %>%
  summarise(prob = mean(obs_rf == 'yes'),
            lift = prob/p.Yes)

df.agg2 <- df.agg %>%
  mutate(dec.pred = forcats::fct_rev(dec.pred))

# Not cumulated lift:
ggplot(df.agg2, aes(x = dec.pred, y = prob)) +
  geom_bar(stat = 'identity') + theme_minimal() +
  geom_line(aes(y = lift/2, group = 1), color = 'red', size = 1.2) +
  geom_label(aes(label = round(lift, 2), y = lift/2)) +
  scale_y_continuous(sec.axis = sec_axis(~.*2, name = 'Gain', breaks = seq(0, 3, by = .25)),
                     name = 'probability of succes', breaks = seq(0, 1, by = .1)) +
  scale_x_discrete(name = 'sorted population') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  +
  labs(title = 'Lift curve (non-cumulative)')

# Cumulated lift
df.agg.cum <- df %>%
  mutate(dec.pred = cut2(yes_rf, g = 10)) %>%
  group_by(dec.pred) %>%
  dplyr::summarise(Nobs = sum(obs_rf == 'yes'),
                   N = n()) %>%
  mutate(dec.pred = fct_rev(dec.pred)) %>%
  arrange(dec.pred) %>%
  mutate(cumprob = cumsum(Nobs)/cumsum(N),
         cumlift = cumprob/p.Yes)

# Chart:
ggplot(df.agg.cum, aes(x = dec.pred, y = cumprob)) +
  geom_bar(stat = 'identity') + theme_minimal() +
  geom_line(aes(y = cumlift/2, group = 1), color = 'red', size = 1.2) +
  geom_label(aes(label = round(cumlift, 2), y = cumlift/2)) +
  scale_y_continuous(sec.axis = sec_axis(~.*2, name = 'dÅºwignia', breaks = seq(0, 3, by = .25)),
                     name = 'probability of succes', breaks = seq(0, 1, by = .1)) +
  scale_x_discrete(name = 'sorted population') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = 'Cummulated Lift')

# 6.4 Other charts -------------------------------------------------------------
classifierplots(as.numeric(df$obs_rf == 'yes'), df$yes_rf)

# 6.5 Lorenz Curve -------------------------------------------------------------
library(gglorenz)

billionaires %>%
  ggplot(aes(TNW)) +
  stat_lorenz(desc = TRUE) +
  coord_fixed() +
  geom_abline(linetype = "dashed") +
  theme_minimal() +
  hrbrthemes::scale_x_percent() +
  hrbrthemes::scale_y_percent() +
  hrbrthemes::theme_ipsum_rc() +
  labs(x = "Cumulative Percentage of the Top 500 Billionaires",
       y = "Cumulative Percentage of Total Net Worth",
       title = "Inequality Among Billionaires",
       caption = "Source: https://www.bloomberg.com/billionaires/ (accessed February 8, 2018)")
# https://github.com/jjchern/gglorenz

# 6.6 Clustering ---------------------------------------------------------------
library(factoextra)
library(palmerpenguins)

# Penguins dataset
data('penguins')
head(penguins)

penguins <- penguins %>%
  drop_na()

pen_num <- penguins %>%
  select_if(is.numeric) %>%
  select(-year) %>%
  mutate_all(scale)

fviz_nbclust(pen_num, kmeans, method = "gap_stat")

set.seed(123)
km.res <- kmeans(pen_num, 4, nstart = 25)
fviz_cluster(
  km.res, data = pen_num,
  geom = 'point',
  ellipse.type = "convex",
  palette = "jco",
  repel = F,
  ggtheme = theme_minimal()
)

penguins$clusters = as.factor(km.res$cluster)

ggplot(penguins, aes(bill_length_mm, bill_depth_mm)) +
  geom_point(aes(color = clusters, shape = species), size=3) +
  facet_wrap(~ species, ncol=3)

# More information:
# https://www.kaggle.com/pranavkasela/different-ways-of-clustering-penguins
# https://github.com/allisonhorst/palmerpenguins
# https://www.datanovia.com/en/blog/cluster-analysis-in-r-practical-guide/

# Interactive version:
# https://github.com/terrytangyuan/autoplotly

# 6.7 PCA ----------------------------------------------------------------------

library("FactoMineR")
res.pca <- PCA(pen_num, graph = FALSE)

fviz_pca_var(res.pca, col.var = "contrib",
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)

fviz_pca_ind(res.pca,
             geom.ind = "point", # show points only (nbut not "text")
             col.ind = penguins$species, # color by groups
             palette = c("#00AFBB", "#E7B800", "#FC4E07"),
             addEllipses = TRUE, # Concentration ellipses
             legend.title = "Groups"
)

fviz_pca_biplot(res.pca, repel = F, geom = 'point',
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
)

# 6.8 Regression ---------------------------------------------------------------

# fitting model
fit <- lm(market_value ~ .-name, data = foot)
summary(fit)

# from ggfortify
autoplot(fit)

# from gglm
# http://graysonwhite.com/gglm/
gglm(fit)

ggplot(data = fit) +
  stat_cooks_leverage(alpha = 1) +
  theme_minimal()

# from ggdist
library(distributional)

broom::tidy(fit) %>%
ggplot(aes(y = term)) +
  stat_dist_halfeye(
    aes(dist = dist_student_t(df = df.residual(fit), mu = estimate, sigma = std.error))
  )

# from Gmisc:
fit2 <- glm(market_value ~ .-name, family = poisson(link = "log"), data = foot)
summary(fit2)

param1 <- broom::tidy(fit) %>%
  mutate(LB = estimate - 2*std.error,
         UB = estimate + 2*std.error)
param2 <- broom::tidy(fit2) %>%
  mutate(LB = estimate - 2*std.error,
         UB = estimate + 2*std.error)

param1

library(Gmisc)
library(forestplot)

forestplot(
  labeltext = param1$term,
  mean = cbind(param1["estimate"], param2["estimate"]),
  lower = cbind(param1["LB"], param2["LB"]),
  upper = cbind(param1[, "UB"], param2[, "UB"]),
  legend = c("Linear model", "Poisson model"),
  boxsize = 0.3,
  line.margin = .1,
  col = fpColors(box = c("blue", "darkred")),
  xlab = "Estimates",
  new_page = TRUE,
  legend.r = unit(.3, "npc"),
  legend_args = fpLegend(
    pos = list(x = .85, y = 0.25),
    gp = gpar(col = "#CCCCCC", fill = "#F9F9F9")
  )
)

# More info:
#  https://ggobi.github.io/ggally/articles/ggnostic.html

# 2.4. survminer
# https://rpkgs.datanovia.com/survminer/index.html


# 3. Another map plot ----------------------------------------------------------
library(ggthemes)

world <- map_data("world")

dat <- read.csv("Data/CLIWOC15.csv")        # having factors here by default isn't a bad thing
dat <- filter(dat, Nation != "Sweden") # I kinda feel bad for Sweden but 4 panels look better than 5 and it doesn't have much data

ggplot(data = world, aes(x = long, y = lat)) +
  geom_map(
    map = world,
    aes(map_id = region),
    color = "white",
    fill = "#7f7f7f",
    size = 0.05,
    alpha = 1 / 4
  ) +
  geom_point(
    data = dat,
    aes(x = Lon3, y = Lat3, color = Nation),
    size = 0.15,
    alpha = 1 / 100
  ) +
  theme_map() +
  theme(strip.background = element_blank(),
        legend.position = "none") +
  scale_color_tableau() +
  facet_wrap(~ Nation)

# Source:
# https://rud.is/b/2015/12/28/world-map-panel-plots-with-ggplot2-2-0-ggalt/

# Exercises --------------------------------------------------------------------
#
# 1. Ilustrate result and progress of Kentucky Derby from 2009. Race belongs to so
# called The Triple Crown of US horse racing. The course of the 135th edition
# assured a place among the most thrilling race ever.

# data preparation
derby <- read.csv2("Data/derby.csv")
dfm <- reshape2::melt(derby)

# 2. Estimate a linear regression model based on boston.csv data (dependent varia-
# ble is MEDV). Visualize results and diagnostic plots. Does the model fulfill
# basic assumptions? Which does? Which doesn't?

spare.time <- read.csv('Data/boston.csv', sep = ";")

# 3. Based on the free_time.csv data estimate two different classification model
# predicting any binary variable in the dataset (for exemple whether a respondent
# has a child (variable any_children) or whether a respondent earns money (variable
# earnings > 0). Ilustrate results.

spare.time <- read.csv('Data/free_time.csv')

# 4. Import dataset about attacks of sharks around the world. Agegat data for
# countries and decades. Then create dumbbel plot and slope chart. If there is
# too many coutries you can limit dataset to 10-20 most endangered countries.


# Homework ---------------------------------------------------------------------

# Using dataset of your choice on the Internet, please use 4 techinques discussed
# above to present information in the data.


#Q.
# 1. Czy znajÄ… te wszystkie modele (czy jednak trzeba tÅ‚umaczyÄ‡)? I czy znajÄ… funkcje do modeli.
# 2. Czy znaja podstawy ggplota?
# 3. Demo + komentarze (do danych, przykÅ‚adÃ³w, tÅ‚a przykÅ‚adÃ³w).
# 4. Rozwiazania.
# 5. Na jakim poziomie sÄ… te studenciaki w R?
# 6. Czy znajÄ… bazowe pakiety (forecast, factominer itp). Jesli nie to czy tÅ‚umaczyÄ‡?
# 7. Czy duzo pytaja?
# 8. Czy w trakcie jest interakcja ze strony proawadzacego (w trakcie przykÅ‚adu prosba o zmodyfikowanie czy monolog?)

